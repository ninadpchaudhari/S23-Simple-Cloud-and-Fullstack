# Creating a Server

## Your first server.
 Let's create a server. Essentially follow [Expressjs Installation guide](https://expressjs.com/en/starter/installing.html) & [Hello World Guide](https://expressjs.com/en/starter/hello-world.html)

1. cd to a new folder
2. `npm init` to initialize a new NPM project.
3. Hit enter for everything.
4. run `npm install express --save` This will save expressjs as a depedency in your package.json file.
5. Create a file `index.js`

Enter hello world code there 
```javascript
const express = require('express') // IMPORT express
const app = express() // create an instance of the import.
const port = 3000 // variable to store the port to listen on

app.get('/', (req, res) => res.send('Hello World!')) // IF you get a GET on '/' send 'Hello World' as a response'

app.listen(port, () => console.log(`Example app listening on port ${port}!`)) // make app listen on the port.
```
You just created a simple Server. That returns Hello world when you ask '/'! 
Now you can use any of the clients to request this server.

Important highlights : 
* `app.get` => accepts 2 parameters. one the path of the request and other the function to run when the path string is received. In our case the path is root or '/' the function is defined in the `arrow` function format.
* `req,res` => the fuction is passed 2 arguments : `req` corresponds to the request. This object can be used to extract request parameters. `res` defines the modifyable object which will be given as a response. In our case, we are not looking for any vairebles from the request and just sending "Hello World!" as a response.

## Generating Entire skeleton of an app.
You can certainly add everyting, but in general an express app has typical skeleton, we can use generator to scaffold out basic functions. We will use `npx` for this.
1. cd to a new directory
2. run `npx express-generator --view ejs` .This will scaffold an express app.
3. Observe the files.

`app.js` is the start point of the app. It contains basic code to parse requests and imports to indexRoutes and userRoutes. `index.js`(one of the controllers) in routes folder contains the code to be invoked when any request hits the server on root domain. An example flow is :
1. A client hits the "/" endpoint. 
2. The expressJS app parses the input and populates the request information in the `req` variable (1st argument) & a `res` variable(2nd argument). 
3. ExpressJS matches the endpoint to existing routes that any controller (or route ) can serve. 
4. If the match is found, that controller is invoked.
5. The function in this controller is responsible to populate the `res` object which was passed when calling the said function.
6. The response is hence sent to the user.

You can run this using command `npm install` followed by `DEBUG=myapp:* npm start` (unix) or `set DEBUG=myapp:* & npm start` (Windows). Checkout [http://localhost:3000](http://localhost:3000) & [http://localhost:3000/users](http://localhost:3000/users). The logic to be sent in the requests is written in the router defined in `index.js` and `users.js` respectfully. 

## Modifying one of the controllers.
### Hello **name**
We want the server to respond with `Hello <your Name>` when the server receives a POST request on `/hello` i.e. `http://localhost:3000/hello`. let's modify the index.js controller. 

```javascript
router.post('/hello', (req,res)=>{
  res.json({"Greeting" : "Hello " + req.body.name});
});
```
We can call this API from any of the clients. Here is a snip of the postman client. 

![Image of postman doing the request](./images/postman-hello.PNG)

We can also call these requests from a Javascript method in HTML file you created. We will use [axios](https://github.com/axios/axios) to do this job in ReactJS app. You can also use the Browser native or any other library to do the ajax call.

### Simple addition API
Consider a simple API where we want the server to give us the result of addition of 2 nos. 
> **Stop** and Think how you would implement this... 

One way is to add the following function in `index.js`:
```javascript
//note, unlike POST, parameters are visible to a user in browser address bar in GET request.
router.get('/add/:firstNumber/and/:secondNumber', (req,res)=>{
  console.log(req.params.firstNumber + req.params.secondNumber);
  //Checkout console to see why parseInt is essential in this case.
  let firstNo = parseInt(req.params.firstNumber),
      secondNo = parseInt(req.params.secondNumber);
  res.json({"Addition" : firstNo + secondNo});
});

```

We could have done this exactly the way we did the previous technique ( using POST request and `res.body`) but this is just another way to demo the `params` attribute. You can see basic routing info on [Express Docs- Routing](https://expressjs.com/en/guide/routing.html)
let's invoke this using other client: your browser. Visit [http://localhost:3000/add/1/and/2](http://localhost:3000/add/1/and/2). 
